I"/<h3 id="type-error">Type error</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">can</span> <span class="nx">not</span> <span class="nx">read</span> <span class="nx">properties</span> <span class="k">of</span> <span class="kc">undefined</span> <span class="p">(</span><span class="nx">reading</span> <span class="nx">map</span><span class="p">)</span>
</code></pre></div></div>

<p>난 optional chaining을 써서</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="nx">dnsInfo</span><span class="p">?.</span><span class="nx">map</span><span class="p">((</span><span class="nx">info</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">뭐시기</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 코드를 썼는데</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="nx">dnsInfo</span> <span class="o">&amp;&amp;</span> <span class="nx">dnsInfo</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">info</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">뭐시기</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>&amp;&amp;연산자를 썼더니 type error가 해결이 되었다.</p>

<p>optional chaining과 &amp;&amp;연산자의 역할은 같아보이는데 왜 &amp;&amp;연산자의 사용으로 type error가 해결이 된걸까?</p>

<p>null이나 undefined가 들어오면 리턴값이 undefined이다</p>

<p><code class="language-plaintext highlighter-rouge">obj?.prop</code> – <code class="language-plaintext highlighter-rouge">obj</code>가 존재하면 <code class="language-plaintext highlighter-rouge">obj.prop</code>을 반환하고, 그렇지 않으면 <code class="language-plaintext highlighter-rouge">undefined</code>를 반환한다.</p>
:ET