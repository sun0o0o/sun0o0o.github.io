I"2<p>원래는 jest를 이용해서 유닛테스트 코드를 짜려고 했는데,</p>

<p>코드를 다 짜고난 다음에, jest에서 코드가 돌아가게 하기 위해 개발이 끝났는데도 코드를 또 수정해야했다. <br />
결국 jest가 아니라 selenium을 사용하기로 했다.</p>

<h3 id="hello-selenium-">Hello, Selenium 🤚🏻</h3>

<p>Selenium은 다양한 브라우저 및 플랫폼에서 웹 응용 프로그램을 위한 open source 테스트 자동화 프레임워크이다.</p>

<p>Selenium은 하나의 도구가 아니라 소프트웨어의 모음이다.</p>

<h3 id="사용하는-이유">사용하는 이유</h3>

<ol>
  <li>자바스크립트가 동적으로 만든 데이터를 크롤링하기 위해</li>
  <li>사이트의 다양한 HTML 요소에 클릭, 키보드 입력 등 이벤트를 주기 위해</li>
  <li>자동으로 로그인하기</li>
  <li>메일 보내기 자동화</li>
</ol>

<h3 id="단점">단점</h3>

<p>브라우저를 직접 동작시켜 실제 사용자 동작을 직접 시뮬레이션한다는 것은 자바스크립트를 이용해 비동기적이나 뒤늦게 불러와지는 컨텐츠들을 가져올 수 있음을 의미한다.</p>

<ol>
  <li>사용자에게 제공되는 눈에보이는 컨텐츠는 전부 크롤링이 가능하지만 컴퓨터 사양에 따라 느릴 수 있다</li>
  <li>브라우저를 직접 켜서 움직이므로 자원을 많이 잡아먹을 수 있다.</li>
</ol>

<p>→ 웹 크롤링 시 requests 라이브러리와 같이 사용해 속도 측면을 보완할 수 있다</p>

<h2 id="기본-코드">기본 코드</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">Builder</span><span class="p">,</span> <span class="nx">By</span><span class="p">,</span> <span class="nx">Key</span><span class="p">,</span> <span class="nx">until</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">selenium-webdriver</span><span class="dl">"</span><span class="p">);</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">example</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">driver</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nx">Builder</span><span class="p">().</span><span class="nx">forBrowser</span><span class="p">(</span><span class="dl">"</span><span class="s2">chrome</span><span class="dl">"</span><span class="p">).</span><span class="nx">build</span><span class="p">();</span>

  <span class="c1">// 네이버 실행</span>
  <span class="k">await</span> <span class="nx">driver</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://www.naver.com/</span><span class="dl">"</span><span class="p">);</span>

  <span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">driver</span><span class="p">.</span><span class="nx">quit</span><span class="p">();</span>
  <span class="p">},</span> <span class="mi">10000</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">example</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="실행">실행</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 파일 위치까지 들어간 후 파일 실행</span>
<span class="nx">node</span> <span class="nx">selenium</span><span class="p">.</span><span class="nx">js</span>
</code></pre></div></div>

<h3 id="wait">Wait</h3>

<p>wait을 쓰는 3가지 경우가 있다.</p>

<ol>
  <li>
    <p>암시적(Implicit) Wait<br />
특정 요소를 로드하는데 시간이 걸리는 application을 테스트하는 경우에 암시적 Wait을 사용할 수 있다. 암시적 Wait은 요소를 로드하는데 걸리는 대략적인 시간을 알고있을 때 유용하다</p>
  </li>
  <li>
    <p>명시적(Explicit) Wait<br />
대기해야하는 조건 지정</p>
  </li>
  <li>
    <p>유창한 (Fluent) Wait<br />
대기 조건, 빈도 등 지정<br />
<a href="'https://www.testim.io/blog/how-to-wait-for-a-page-to-load-in-selenium/'">참고</a></p>
  </li>
</ol>

<h3 id="localhost-연결">Localhost 연결</h3>

<p>배포되어있는 사이트에서 test를 돌리고 있었는데 고치고 싶은 부분이 생겨서 localhost로 테스트를 해야겠다는 생각이 들었다.
localhost에서 어떻게 selenium이 안돌아가는 2가지 문제가 있었다.</p>

<ol>
  <li>코드의 문제<br />
처음엔 <code class="language-plaintext highlighter-rouge">await driver.get("https://localhost:3000")</code> 이렇게 적었었는데,</li>
</ol>
<center><img width="80%" alt="스크린샷 2022-10-14 오후 2 36 33" src="https://user-images.githubusercontent.com/85756211/212615914-455bc088-774d-4fc2-a326-fb78564f24a1.png" /></center>
<p>배포된 페이지 같은 경우 https로된 인증서를 발급받은 서버가 항상 켜져있기 때문에 https로 들어갈 수 있지만
우리는 인증서를 받은 http 로컬호스트 서버가 없다. 그래서 http라고 작성해야한다</p>

<ol>
  <li>환경의 문제<br />
1번과 같은 맥락이다. npm run start를 해서 <code class="language-plaintext highlighter-rouge">localhost</code> 서버를 켜줘야 localhost 주소의 client를 test할 수 있다.</li>
</ol>
:ET